Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.

class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        if(s1.size()>s2.size()){
            return false;
        }
        int a[26];   //counter array 
        for(int i=0;i<s1.size();i++){
            char ch=s1[i];
            int num=ch-'a';
                a[num]++;
        }
        int i=0,j=0,tc=s1.size();    //tc= total character
        while(j<s2.size()){
            
            if(tc==0){
                return true;
                
            }
            if((a[s2[j]-'a']--)>0){
                tc--;
                j++;
                
            }
            
            if(j-i==s1.size()){
                i++;
            }
            
            j++;
        }
        return false;
    }
};
